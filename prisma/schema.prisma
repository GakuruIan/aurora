generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @unique @default(uuid())
  clerkId        String          @unique
  email          String          @unique
  username       String          @unique
  avatar         String
  verified       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  notes          Note[]
  categories     NoteCategory[]
  linkedAccounts LinkedAccount[]
  oauthTokens    OAuthToken[]
  googleEmails   GoogleEmail[]
  googleTasks    GoogleTask[]
  syncToken      SyncToken[]
}

model OAuthToken {
  id           String    @id @unique @default(uuid())
  ownerId      String    @unique
  googleEmail  String
  googleId     String    @unique
  owner        User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  accessToken  String
  refreshToken String?
  scope        String?
  tokenType    String
  expiryDate   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  synced       Boolean   @default(false)
  oramaIndex   Json?

  @@unique([ownerId, googleEmail])
  @@index([ownerId])
}

model LinkedAccount {
  id          String @id @unique @default(uuid())
  ownerId     String
  accessToken String @unique
  email       String
  name        String
  owner       User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Note {
  id         String       @id @unique @default(uuid())
  title      String       @unique
  content    String
  categoryId String
  ownerId    String
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category   NoteCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model NoteCategory {
  id        String   @id @unique @default(uuid())
  name      String
  colorCode String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, ownerId])
}

model GoogleTask {
  id        String    @id @default(uuid())
  ownerId   String
  user      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  taskId    String    @unique
  title     String
  notes     String?
  status    String    @default("needsAction")
  listTitle String
  listId    String
  dueDate   DateTime?
  completed DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model GoogleEmail {
  id               String   @id @default(uuid())
  ownerId          String
  user             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  messageId        String   @unique
  from             String
  to               String
  subject          String
  body             String   @db.Text
  preprocessedBody String   @db.Text
  snippet          String
  labels           String[] // Stores labels like "INBOX", "IMPORTANT", "STARRED"
  receivedAt       DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SyncToken {
  id         String @id @default(uuid())
  taskListId String @unique
  syncToken  String
  ownerId    String
  owner      User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([ownerId, taskListId])
}

model GoogleWatch {
  id        String @id @default(uuid())
  historyId String
  userId    String @unique
}
